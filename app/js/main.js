angular.module("angularApp",["ngRoute","ui.bootstrap","ngAnimate","highcharts-ng"]);
angular.module("angularApp").config(["$routeProvider",function(e){e.when("/",{templateUrl:"src/home/home.tpl.html",controller:"HomeCtrl",controllerAs:"vm"}).otherwise("/")}]);
angular.module("angularApp").controller("HomeCtrl",["Build","Utils","$q",function(t,e,n){function a(){t.getBuild().then(f.fn.extendBuild).then(f.fn.runNextPendingBuild)}function s(t){var e=angular.copy(f.data.buildDefaults),n=_.extend({},t,e);return f.ui.start=!1,f.data.pending.push(n),f.data.builds.push(n),n}function i(){return f.fn.runBuild().then(f.fn.addMockTestsResults).then(f.fn.analyzeBuild).then(f.fn.addResults).then(f.fn.runNextPendingBuild)}function d(){if(!f.ui.building&&f.data.pending.length>0){var e=f.data.pending.shift();return e.state=f.data.states[1],f.ui.building=!0,t.runBuild(e)}return n.reject("build skipped")}function u(t){for(var n in t.metrics)t.metrics.hasOwnProperty(n)&&(t.metrics[n]=e.randomNumber(100));return t.unitTest.passed=e.randomNumber(t.totalUnitTests),t.unitTest.failed=t.totalUnitTests-t.unitTest.passed,t.unitTest.percent=t.unitTest.passed/t.totalUnitTests*100,t.unitTest.coverage=e.randomNumber(100),t.functionalTest.passed=e.randomNumber(t.totalFunctionalTests),t.functionalTest.failed=t.totalFunctionalTests-t.functionalTest.passed,t.functionalTest.percent=t.functionalTest.passed/t.totalFunctionalTests*100,t.functionalTest.coverage=e.randomNumber(100),t}function l(t){var e,n=t.id-1,a=_.find(f.data.builds,{id:n}),s=t.metrics;return a?(s.testPassed=s.test-a.metrics.test>=0,s.maintainPassed=s.maintainability-a.metrics.maintainability>=0,e=s.testPassed&&s.maintainPassed,e?t.state=f.data.states[2]:t.state=f.data.states[3]):(s.testPassed=!0,s.maintainPassed=!0,t.state=f.data.states[2]),t.chart={unitTest:f.fn.initChart(t.unitTest.passed,t.unitTest.failed),functionalTest:f.fn.initChart(t.functionalTest.passed,t.functionalTest.failed)},t}function r(t){return"rejected"===t.state?t.result=f.data.results[1]:"complete"===t.state&&"firewall"===t.type?t.result=f.data.results[0]:"complete"===t.state&&"build"===t.type&&(t.result=f.data.results[2]),f.ui.building=!1,t}function o(){f.data.builds=[]}function c(t){"pending"!==t.state&&"running"!==t.state&&(f.data.expandedBuild&&t.id===f.data.expandedBuild.id?(t.expanded=!t.expanded,t.showChart=!t.showChart,f.data.expandedBuild=null):(f.data.builds.forEach(function(t){t.expanded=!1,t.showChart=!1}),f.data.expandedBuild=t,t.expanded=!0,t.showChart=!0))}function p(t,e){return{options:{legend:{align:"center",verticalAlign:"bottom",layout:"vertical",useHTML:!0,labelFormatter:function(){return'<span class="legend-wrapper"><span class="text-ellipsis font9 legend-title">'+this.name+'</span> <span class="mute font9">('+this.y+")</span></span>"}},plotOptions:{pie:{point:{events:{legendItemClick:function(){return!1}}},enableMouseTracking:!1,showInLegend:!0,innerSize:"67%",dataLabels:{enabled:!1}}}},size:{height:200},title:{text:""},series:[{type:"pie",data:[{name:"Passed",y:t},{name:"Failed",y:e}]}]}}var f=this;f.data={results:[{status:"merged",subTitle:"Change Accepted",message:"Auto-Merged"},{status:"rejected",subTitle:"Change Rejected",message:"Metrics Reduction"},{status:"complete",subTitle:null,message:"Complete"}],states:["pending","running","complete","rejected"],buildDefaults:{state:"pending",progress:{metrics:0,build:0,unitTest:0,functionalTest:0},expanded:!1,metrics:{test:0,security:0,maintainability:0,workmanship:0},unitTest:{passed:0,failed:0,coverage:0},functionalTest:{passed:0,failed:0,coverage:0},result:null},pending:[],builds:[]},f.ui={building:!1,start:!0},f.fn={addBuild:a,runBuild:d,clearBuilds:o,addMockTestsResults:u,runNextPendingBuild:i,expandBuild:c,initChart:p,extendBuild:s,analyzeBuild:l,addResults:r},a()}]);
angular.module("angularApp").factory("Build",["$q","$timeout","$interval","Utils",function(r,e,t,n){function a(){var t=r.defer();return e(function(){var r=n.getRandomItemFromArray(d),e=n.getRandomItemFromArray(s),a={buildNumber:f,id:"build"===r?u:i,type:r,name:"build"===r?b+"-"+u:i,owner:e,date:moment().format(),build:{lastBuild:moment().subtract(1,"day").format()},totalUnitTests:l,totalFunctionalTests:m};"build"===r?u++:i++,f++,t.resolve(a)},500),t.promise}function o(e){function n(r){var u,i;if(!(r<o.length))return a.resolve(e);var l=t(function(){return u=e.progress[o[r]],i=o[r],100>u?e.progress[i]+=1:(t.cancel(l),n(r+1))},10)}var a=r.defer(),o=Object.keys(e.progress);return n(0),a.promise}var u=n.randomNumber(1e4),i=n.randomNumber(1e4),l=n.randomNumber(100),m=n.randomNumber(1e3),d=["build","firewall"],s=["alex","joe","adi","william"],b="rainman",f=0;return{getBuild:a,runBuild:o}}]);
angular.module("angularApp").factory("Utils",function(){function r(r){var n=a.randomNumber(r.length-1);return r[n]}function n(r){return Math.round(Math.random()*r)}var a={randomNumber:n,getRandomItemFromArray:r};return a});
//# sourceMappingURL=data:application/json;base64,
